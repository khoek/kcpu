
SOFT/FIRMWARE:

  VM UI:
    * Write a post-processor for the disassembler to try to collapse aliases.---this isn't super hard, just search
      for aliases which begin with the first actual opcode, and then continue checking ahead for matches.
            ---> It would probably be best to do this after loading and before executing the binary, so that
                 we don't get confused when we are in the middle of a few instructions all part of the same alias.


  In the VM:
    * FLAG-ONLY versions of the ALU insts (we already value-only versions).

    * DEAL with the hardware design comment in the push_pop test

    * Allow a const in either argument in e.g. a STW (but not e.g. LDW)

    * Could turn RCTRL_RSP_DEC (no need for RCTRL_RSP_INC) into a bit passed during the fetch phase, like LOADDATA is right now.

    * Compress flags!


    * Does an ordinary NOP in some code cause a 1-uop stutter when REG_UC gets reset?


    * MOAR TESTS



HARDWARE:

  USE 74HC193 for COUNTERS!!!!

  Remember for designs:
    * Remember, BUS_A and BUS_B should both be pulled low.
    * WE ADDED A HARDWARE INC COMMAND TO RSP. (CAN WE DEC IN ONE INST TOO??? Are there chips which do that? (unlikely?))
    * We are hardware latching a mask or something in mod_ctl


  Bugs in current revisions:
  * ALU: the high bits of the switch connecting BUS_B
        to the ALU flags register float!!!!
    ALU: It also has two floating gates!!!

  Improvements future revisions:
  * remove the zero registers from the REG module? (can we change the VM code so that we never use a pull-down behaviour?)
  * remote the one register and deal with it in the microcode?---once we fix NEG, we only need REG_ONE for NOT.
    ---much more useful would be a constant=2 reg, we should see where these are and see if we can fix by adding hardware decrements (do these exist?),
       and if they don't maybe consider adding a "2" register.
  * mod_alu: OR and AND are swapped physically on the board vs the mode signal numbers




  Need to think more:
  * Originally improvement thought, but then I remembered:
    mod_mem: allow 1-clock word reads and writes. -> If you have this, you can't write into RA using the address in RA---so forget it?


